
RC TODOs:
- document custom allocator support
- document memory usage?
- remove error handling of memory allocation failure because I've decided that's stupid
	- actually, now that I've added custom allocator support, and custom allocators might fail for various reasons, maybe don't axe this?



- POSSIBLE OPTIMIZATION: if there are fewer pixels left in the frame than codes available in the lzw table, can we memset less of it?
	- how often will this happen, and how much will we save on average?
	- NOTE: the boundary is actually probably more like 2x the lzw table size, as after ever unique color has been seen by the encoder, it will take at least 2 pixels to create a new table entry



- async/multithreaded API
- runtime option for channel importance order?
- increase maximum bit depth to 16?
	- requires re-auditing bake code to make sure this won't cause problems
- bitfield for `used` array????
- figure out if we can be less conservative with the trailing codes?

- allow resetting thread id for more readable output from trace.cpp?
- trace.cpp cumulative time reporting tools



documentation:
	- in file
	- in repository/readme
	- things to cover:
		- use case for this library
			- things this library specifically doesn't do
				- exact colors, fancy GIF features
				- image resizing (use stb_image_resize if you need this)
			- things it doesn't do *yet*, but can be supported upon request
				- support for custom allocators
				- support for writing to a memory block instead of a file
				- async API
				- support for other pixel formats (can provide optimized conversion functions for common ones that arise)
		- how much memory the library will allocate
		- API, parameter-by-parameter
		- compile-time options
	- example code for opengl app (pull from escher)




https://docs.microsoft.com/en-us/windows/desktop/ProcThread/creating-threads
https://docs.microsoft.com/en-us/windows/desktop/sync/synchronization-barriers
