gif exporter notes



allow "immediate mode" (frame-by-frame) export
	return opaque pointer to struct containing persistent state (no global data)
	limited ability for immediate-mode payoff because all frames must be cooked before any can be compressed
		allow compressing one-at-a-time to avoid long stalls?
			or just make it so damn fast that it doesn't matter :^)

allow user to specify channel importance (RGB, RBG, GRB, GBR, BRG, BGR)
	maybe even allow them to provide their own palette chain????? would that be too much? probably...
		I think allowing them to specify maximum bits per channel is good enough!
allow user to provide their own malloc, realloc, free equivalents?
allow user to explicitly enable/disable SIMD paths
maybe allow different input formats (RGBA, BGRA, RGB, etc.)???
	look at how stb_image_write library handles these sort of API design decisions
	ask people on the discord for their input?

remove dependencies on other headers
remove C++isms to make it pure C code?
turn into single-header library
write documentation

true-color???
	bitfield for color tracker?

detecting user error? (i.e. invalid parameters)



TODO:
! change to 15 bit meta-meta-palette
! early-out of palette selection loop
! switch to using 4-byte ints for palette selection/quantization
! add optional dithering
! combine dithered and non-dithered code paths
! pack bits together when cooking instead of just masking them out
! switch to using ints instead of pixel structs
! allow different input data formats?
! add test cases where width/height are not a multiple of 8

! SSE optimization
! AVX optimization
! multithreading

! runtime options for thread count
- add runtime option for channel importance order?
- add runtime option for maximum bit depth?
- add test cases for smaller and larger GIFs?
- put SIMD and multithreading behind preprocessor options
- remove other header dependencies
- allow custom malloc/realloc/free implementations?
- remove C++isms
- make sure it compiles correctly on all targets (gcc + clang + msvc, 32 + 64 bit)
- combine header and implementation
- asserts for invalid user parameters??
- or maybe proper error handling???
