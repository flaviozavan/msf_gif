
TODO:
- preprocessor options to turn off multithreading or intrinsics
- win+MSVC compatibility
	- intrinsics
	- pthreads
- allow specifying frame timings per-frame in the API

API questions:
- should I provide for per-frame timings?
	- if so, how? is centiseconds good enough? should I instead take milliseconds and do the error accumulation myself?
- should I provide an async API similar to the incremental API but it spawn background threads to do the work?
	- if so, how should memory management be handled? is it good enough to just provide a `volatile int freeableFrame`?
	(work through this a bit before posting about it)
- how should the `quality` argument be presented? should it stay how it is, or be remapped to something more standard?
- is the `upsideDown` bool arg good enough for common use cases? should I provide a stride as well?
	- can provide SIMD-optimized swizzling functions for any other scenarios that turn out to be common
- should I support writing to a memory block instead of a file? is that needed? if so, how would that best be done?
	- write to a memory block by default, and make a wrapper that then writes that block to a file for convenience?
		- this approach can be retrofitted to the API later on, so it's probably fine to defer this decision

- combine header and implementation
	- rename everything at global scope to avoid name conflicts
- make sure it compiles correctly on all targets (gcc + clang + msvc, 32 + 64 bit)
- API for returning a block of encoded memory instead of writing it out with <stdio.h> functions
- comparisons to other libraries
- write documentation

- runtime option for channel importance order?
- allow custom allocators
- increase maximum bit depth to 16?
- asserts for invalid user parameters??
- explicit error handling???
- bitfield for `used` array????



documentation:
	- in file
	- in repository
	- things to cover:
		- use case for this library
			- things this library specifically doesn't do
				- exact colors, fancy GIF features
				- image resizing (use stb_image_resize if you need this)
			- thins it doesn't to *yet*, but can be supported upon request
		- how much memory the library will allocate
		- API, parameter-by-parameter
		- compile-time options
		- performance tips
- publish and publicize




https://docs.microsoft.com/en-us/windows/desktop/ProcThread/creating-threads
https://docs.microsoft.com/en-us/windows/desktop/sync/synchronization-barriers
